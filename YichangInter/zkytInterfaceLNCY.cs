//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.6.1055.0。
// 
namespace zkytInterfaceLNCY {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DeviceSwapIfaceImplServiceSoapBinding", Namespace="http://iface.server.webservice.zkyt.com/")]
    public partial class DeviceSwapIfaceImplService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback wqfxyAdjustOperationCompleted;
        
        private System.Threading.SendOrPostCallback lightproofSmokeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServerTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback doubleIdleLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback vmasLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback vmasDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSatateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAsmLimitOperationCompleted;
        
        private System.Threading.SendOrPostCallback bgAirHCOperationCompleted;
        
        private System.Threading.SendOrPostCallback vasmLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback hjcsgyqSelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback softVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback cgjPLHPSelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCarInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback wqfxySelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback vasmDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback motoDbIdleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LightproofSmokeLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCheckResultOperationCompleted;
        
        private System.Threading.SendOrPostCallback lljSelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback sdsqtfxySelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback doubleIdleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback loadDownLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ydjSelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback cgjSelfcheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback loadDownDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback argChangOperationCompleted;
        
        /// <remarks/>
        public DeviceSwapIfaceImplService() {
            this.Url = "http://172.31.1.53:8095/jczjk/services/deviceSwap";
        }
        public DeviceSwapIfaceImplService(string url)
        {
            if (url == "")
                this.Url = "http://172.31.1.53:8095/jczjk/services/deviceSwap";
            else
                this.Url = url;
        }
        
        /// <remarks/>
        public event wqfxyAdjustCompletedEventHandler wqfxyAdjustCompleted;
        
        /// <remarks/>
        public event lightproofSmokeDataCompletedEventHandler lightproofSmokeDataCompleted;
        
        /// <remarks/>
        public event sendMessageCompletedEventHandler sendMessageCompleted;
        
        /// <remarks/>
        public event getServerTimeCompletedEventHandler getServerTimeCompleted;
        
        /// <remarks/>
        public event doubleIdleLogCompletedEventHandler doubleIdleLogCompleted;
        
        /// <remarks/>
        public event vmasLogCompletedEventHandler vmasLogCompleted;
        
        /// <remarks/>
        public event vmasDataCompletedEventHandler vmasDataCompleted;
        
        /// <remarks/>
        public event getSatateCompletedEventHandler getSatateCompleted;
        
        /// <remarks/>
        public event getAsmLimitCompletedEventHandler getAsmLimitCompleted;
        
        /// <remarks/>
        public event bgAirHCCompletedEventHandler bgAirHCCompleted;
        
        /// <remarks/>
        public event vasmLogCompletedEventHandler vasmLogCompleted;
        
        /// <remarks/>
        public event hjcsgyqSelfcheckCompletedEventHandler hjcsgyqSelfcheckCompleted;
        
        /// <remarks/>
        public event softVersionCompletedEventHandler softVersionCompleted;
        
        /// <remarks/>
        public event cgjPLHPSelfcheckCompletedEventHandler cgjPLHPSelfcheckCompleted;
        
        /// <remarks/>
        public event getCarInfoCompletedEventHandler getCarInfoCompleted;
        
        /// <remarks/>
        public event wqfxySelfcheckCompletedEventHandler wqfxySelfcheckCompleted;
        
        /// <remarks/>
        public event vasmDataCompletedEventHandler vasmDataCompleted;
        
        /// <remarks/>
        public event motoDbIdleDataCompletedEventHandler motoDbIdleDataCompleted;
        
        /// <remarks/>
        public event LightproofSmokeLogCompletedEventHandler LightproofSmokeLogCompleted;
        
        /// <remarks/>
        public event getCheckResultCompletedEventHandler getCheckResultCompleted;
        
        /// <remarks/>
        public event lljSelfcheckCompletedEventHandler lljSelfcheckCompleted;
        
        /// <remarks/>
        public event sdsqtfxySelfcheckCompletedEventHandler sdsqtfxySelfcheckCompleted;
        
        /// <remarks/>
        public event doubleIdleDataCompletedEventHandler doubleIdleDataCompleted;
        
        /// <remarks/>
        public event loadDownLogCompletedEventHandler loadDownLogCompleted;
        
        /// <remarks/>
        public event ydjSelfcheckCompletedEventHandler ydjSelfcheckCompleted;
        
        /// <remarks/>
        public event cgjSelfcheckCompletedEventHandler cgjSelfcheckCompleted;
        
        /// <remarks/>
        public event loadDownDataCompletedEventHandler loadDownDataCompleted;
        
        /// <remarks/>
        public event argChangCompletedEventHandler argChangCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string wqfxyAdjust(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string gasType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueCO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double detectValueCO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueCO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double detectValueCO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueNO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double detectValueNO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueHC, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double detectValueHC, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double detectValueO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValuePEF, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueC3H8, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string adjustResult, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string adjustTimeStart, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string adjustTimeEnd, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("wqfxyAdjust", new object[] {
                        registCode,
                        gasType,
                        labelValueCO2,
                        detectValueCO2,
                        labelValueCO,
                        detectValueCO,
                        labelValueNO,
                        detectValueNO,
                        labelValueHC,
                        detectValueHC,
                        labelValueO2,
                        detectValueO2,
                        labelValuePEF,
                        labelValueC3H8,
                        adjustResult,
                        adjustTimeStart,
                        adjustTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwqfxyAdjust(
                    string registCode, 
                    string gasType, 
                    double labelValueCO2, 
                    double detectValueCO2, 
                    double labelValueCO, 
                    double detectValueCO, 
                    double labelValueNO, 
                    double detectValueNO, 
                    double labelValueHC, 
                    double detectValueHC, 
                    double labelValueO2, 
                    double detectValueO2, 
                    double labelValuePEF, 
                    double labelValueC3H8, 
                    string adjustResult, 
                    string adjustTimeStart, 
                    string adjustTimeEnd, 
                    string remark, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("wqfxyAdjust", new object[] {
                        registCode,
                        gasType,
                        labelValueCO2,
                        detectValueCO2,
                        labelValueCO,
                        detectValueCO,
                        labelValueNO,
                        detectValueNO,
                        labelValueHC,
                        detectValueHC,
                        labelValueO2,
                        detectValueO2,
                        labelValuePEF,
                        labelValueC3H8,
                        adjustResult,
                        adjustTimeStart,
                        adjustTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwqfxyAdjust(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wqfxyAdjustAsync(
                    string registCode, 
                    string gasType, 
                    double labelValueCO2, 
                    double detectValueCO2, 
                    double labelValueCO, 
                    double detectValueCO, 
                    double labelValueNO, 
                    double detectValueNO, 
                    double labelValueHC, 
                    double detectValueHC, 
                    double labelValueO2, 
                    double detectValueO2, 
                    double labelValuePEF, 
                    double labelValueC3H8, 
                    string adjustResult, 
                    string adjustTimeStart, 
                    string adjustTimeEnd, 
                    string remark) {
            this.wqfxyAdjustAsync(registCode, gasType, labelValueCO2, detectValueCO2, labelValueCO, detectValueCO, labelValueNO, detectValueNO, labelValueHC, detectValueHC, labelValueO2, detectValueO2, labelValuePEF, labelValueC3H8, adjustResult, adjustTimeStart, adjustTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void wqfxyAdjustAsync(
                    string registCode, 
                    string gasType, 
                    double labelValueCO2, 
                    double detectValueCO2, 
                    double labelValueCO, 
                    double detectValueCO, 
                    double labelValueNO, 
                    double detectValueNO, 
                    double labelValueHC, 
                    double detectValueHC, 
                    double labelValueO2, 
                    double detectValueO2, 
                    double labelValuePEF, 
                    double labelValueC3H8, 
                    string adjustResult, 
                    string adjustTimeStart, 
                    string adjustTimeEnd, 
                    string remark, 
                    object userState) {
            if ((this.wqfxyAdjustOperationCompleted == null)) {
                this.wqfxyAdjustOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwqfxyAdjustOperationCompleted);
            }
            this.InvokeAsync("wqfxyAdjust", new object[] {
                        registCode,
                        gasType,
                        labelValueCO2,
                        detectValueCO2,
                        labelValueCO,
                        detectValueCO,
                        labelValueNO,
                        detectValueNO,
                        labelValueHC,
                        detectValueHC,
                        labelValueO2,
                        detectValueO2,
                        labelValuePEF,
                        labelValueC3H8,
                        adjustResult,
                        adjustTimeStart,
                        adjustTimeEnd,
                        remark}, this.wqfxyAdjustOperationCompleted, userState);
        }
        
        private void OnwqfxyAdjustOperationCompleted(object arg) {
            if ((this.wqfxyAdjustCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wqfxyAdjustCompleted(this, new wqfxyAdjustCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string lightproofSmokeData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeValue1, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeValue2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeValue3, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string speed) {
            object[] results = this.Invoke("lightproofSmokeData", new object[] {
                        businessId,
                        registCode,
                        smokeValue1,
                        smokeValue2,
                        smokeValue3,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd,
                        speed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginlightproofSmokeData(string businessId, string registCode, double smokeValue1, double smokeValue2, double smokeValue3, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, string speed, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("lightproofSmokeData", new object[] {
                        businessId,
                        registCode,
                        smokeValue1,
                        smokeValue2,
                        smokeValue3,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd,
                        speed}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndlightproofSmokeData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void lightproofSmokeDataAsync(string businessId, string registCode, double smokeValue1, double smokeValue2, double smokeValue3, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, string speed) {
            this.lightproofSmokeDataAsync(businessId, registCode, smokeValue1, smokeValue2, smokeValue3, tempreture, humidity, airPressure, timeStart, timeEnd, speed, null);
        }
        
        /// <remarks/>
        public void lightproofSmokeDataAsync(string businessId, string registCode, double smokeValue1, double smokeValue2, double smokeValue3, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, string speed, object userState) {
            if ((this.lightproofSmokeDataOperationCompleted == null)) {
                this.lightproofSmokeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlightproofSmokeDataOperationCompleted);
            }
            this.InvokeAsync("lightproofSmokeData", new object[] {
                        businessId,
                        registCode,
                        smokeValue1,
                        smokeValue2,
                        smokeValue3,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd,
                        speed}, this.lightproofSmokeDataOperationCompleted, userState);
        }
        
        private void OnlightproofSmokeDataOperationCompleted(object arg) {
            if ((this.lightproofSmokeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.lightproofSmokeDataCompleted(this, new lightproofSmokeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sendMessage([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string code, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string message) {
            object[] results = this.Invoke("sendMessage", new object[] {
                        businessId,
                        registCode,
                        code,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsendMessage(string businessId, string registCode, string code, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("sendMessage", new object[] {
                        businessId,
                        registCode,
                        code,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsendMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendMessageAsync(string businessId, string registCode, string code, string message) {
            this.sendMessageAsync(businessId, registCode, code, message, null);
        }
        
        /// <remarks/>
        public void sendMessageAsync(string businessId, string registCode, string code, string message, object userState) {
            if ((this.sendMessageOperationCompleted == null)) {
                this.sendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendMessageOperationCompleted);
            }
            this.InvokeAsync("sendMessage", new object[] {
                        businessId,
                        registCode,
                        code,
                        message}, this.sendMessageOperationCompleted, userState);
        }
        
        private void OnsendMessageOperationCompleted(object arg) {
            if ((this.sendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendMessageCompleted(this, new sendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getServerTime() {
            object[] results = this.Invoke("getServerTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetServerTime(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getServerTime", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetServerTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getServerTimeAsync() {
            this.getServerTimeAsync(null);
        }
        
        /// <remarks/>
        public void getServerTimeAsync(object userState) {
            if ((this.getServerTimeOperationCompleted == null)) {
                this.getServerTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServerTimeOperationCompleted);
            }
            this.InvokeAsync("getServerTime", new object[0], this.getServerTimeOperationCompleted, userState);
        }
        
        private void OngetServerTimeOperationCompleted(object arg) {
            if ((this.getServerTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServerTimeCompleted(this, new getServerTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string doubleIdleLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int inspectNum, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowCO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowCO2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double analyserO2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double oilTemperature, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string rotateSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeSequence) {
            object[] results = this.Invoke("doubleIdleLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        analyserO2,
                        oilTemperature,
                        rotateSpeed,
                        timeSequence});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindoubleIdleLog(string businessId, string registCode, int inspectNum, double flowHC, double flowCO, double flowCO2, double analyserO2, double oilTemperature, string rotateSpeed, string timeSequence, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("doubleIdleLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        analyserO2,
                        oilTemperature,
                        rotateSpeed,
                        timeSequence}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EnddoubleIdleLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doubleIdleLogAsync(string businessId, string registCode, int inspectNum, double flowHC, double flowCO, double flowCO2, double analyserO2, double oilTemperature, string rotateSpeed, string timeSequence) {
            this.doubleIdleLogAsync(businessId, registCode, inspectNum, flowHC, flowCO, flowCO2, analyserO2, oilTemperature, rotateSpeed, timeSequence, null);
        }
        
        /// <remarks/>
        public void doubleIdleLogAsync(string businessId, string registCode, int inspectNum, double flowHC, double flowCO, double flowCO2, double analyserO2, double oilTemperature, string rotateSpeed, string timeSequence, object userState) {
            if ((this.doubleIdleLogOperationCompleted == null)) {
                this.doubleIdleLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoubleIdleLogOperationCompleted);
            }
            this.InvokeAsync("doubleIdleLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        analyserO2,
                        oilTemperature,
                        rotateSpeed,
                        timeSequence}, this.doubleIdleLogOperationCompleted, userState);
        }
        
        private void OndoubleIdleLogOperationCompleted(object arg) {
            if ((this.doubleIdleLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doubleIdleLogCompleted(this, new doubleIdleLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string vmasLog(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int inspectNum, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowHC, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowCO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowCO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowNO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double analyserO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowmeterO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actFlow, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double stdFlow, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tailFlow, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double weightHC, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double weightCO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double weightNO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double lineSpeed, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double totalPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double parasPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double indicPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowAirPressure, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double flowTemperature, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirTemperature, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirAirPressure, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirHumidity, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double diluteCorrect, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidityCorrect, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double diluteRatio, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeSequence, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double standardSpeed, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double mortorSpeed) {
            object[] results = this.Invoke("vmasLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        flowNO,
                        analyserO2,
                        flowmeterO2,
                        envO2,
                        actFlow,
                        stdFlow,
                        tailFlow,
                        weightHC,
                        weightCO,
                        weightNO,
                        lineSpeed,
                        totalPower,
                        parasPower,
                        indicPower,
                        flowAirPressure,
                        flowTemperature,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        diluteCorrect,
                        humidityCorrect,
                        diluteRatio,
                        timeSequence,
                        standardSpeed,
                        mortorSpeed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginvmasLog(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double flowHC, 
                    double flowCO, 
                    double flowCO2, 
                    double flowNO, 
                    double analyserO2, 
                    double flowmeterO2, 
                    double envO2, 
                    double actFlow, 
                    double stdFlow, 
                    double tailFlow, 
                    double weightHC, 
                    double weightCO, 
                    double weightNO, 
                    double lineSpeed, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double flowAirPressure, 
                    double flowTemperature, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double diluteCorrect, 
                    double humidityCorrect, 
                    double diluteRatio, 
                    string timeSequence, 
                    double standardSpeed, 
                    double mortorSpeed, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("vmasLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        flowNO,
                        analyserO2,
                        flowmeterO2,
                        envO2,
                        actFlow,
                        stdFlow,
                        tailFlow,
                        weightHC,
                        weightCO,
                        weightNO,
                        lineSpeed,
                        totalPower,
                        parasPower,
                        indicPower,
                        flowAirPressure,
                        flowTemperature,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        diluteCorrect,
                        humidityCorrect,
                        diluteRatio,
                        timeSequence,
                        standardSpeed,
                        mortorSpeed}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndvmasLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void vmasLogAsync(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double flowHC, 
                    double flowCO, 
                    double flowCO2, 
                    double flowNO, 
                    double analyserO2, 
                    double flowmeterO2, 
                    double envO2, 
                    double actFlow, 
                    double stdFlow, 
                    double tailFlow, 
                    double weightHC, 
                    double weightCO, 
                    double weightNO, 
                    double lineSpeed, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double flowAirPressure, 
                    double flowTemperature, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double diluteCorrect, 
                    double humidityCorrect, 
                    double diluteRatio, 
                    string timeSequence, 
                    double standardSpeed, 
                    double mortorSpeed) {
            this.vmasLogAsync(businessId, registCode, inspectNum, flowHC, flowCO, flowCO2, flowNO, analyserO2, flowmeterO2, envO2, actFlow, stdFlow, tailFlow, weightHC, weightCO, weightNO, lineSpeed, totalPower, parasPower, indicPower, flowAirPressure, flowTemperature, envirTemperature, envirAirPressure, envirHumidity, diluteCorrect, humidityCorrect, diluteRatio, timeSequence, standardSpeed, mortorSpeed, null);
        }
        
        /// <remarks/>
        public void vmasLogAsync(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double flowHC, 
                    double flowCO, 
                    double flowCO2, 
                    double flowNO, 
                    double analyserO2, 
                    double flowmeterO2, 
                    double envO2, 
                    double actFlow, 
                    double stdFlow, 
                    double tailFlow, 
                    double weightHC, 
                    double weightCO, 
                    double weightNO, 
                    double lineSpeed, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double flowAirPressure, 
                    double flowTemperature, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double diluteCorrect, 
                    double humidityCorrect, 
                    double diluteRatio, 
                    string timeSequence, 
                    double standardSpeed, 
                    double mortorSpeed, 
                    object userState) {
            if ((this.vmasLogOperationCompleted == null)) {
                this.vmasLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmasLogOperationCompleted);
            }
            this.InvokeAsync("vmasLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        flowHC,
                        flowCO,
                        flowCO2,
                        flowNO,
                        analyserO2,
                        flowmeterO2,
                        envO2,
                        actFlow,
                        stdFlow,
                        tailFlow,
                        weightHC,
                        weightCO,
                        weightNO,
                        lineSpeed,
                        totalPower,
                        parasPower,
                        indicPower,
                        flowAirPressure,
                        flowTemperature,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        diluteCorrect,
                        humidityCorrect,
                        diluteRatio,
                        timeSequence,
                        standardSpeed,
                        mortorSpeed}, this.vmasLogOperationCompleted, userState);
        }
        
        private void OnvmasLogOperationCompleted(object arg) {
            if ((this.vmasLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.vmasLogCompleted(this, new vmasLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string vmasData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double valueCO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double valueHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double valueNO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double testSetPower, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double totalDistance, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd) {
            object[] results = this.Invoke("vmasData", new object[] {
                        businessId,
                        registCode,
                        valueCO,
                        valueHC,
                        valueNO,
                        testSetPower,
                        totalDistance,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginvmasData(string businessId, string registCode, double valueCO, double valueHC, double valueNO, double testSetPower, double totalDistance, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("vmasData", new object[] {
                        businessId,
                        registCode,
                        valueCO,
                        valueHC,
                        valueNO,
                        testSetPower,
                        totalDistance,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndvmasData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void vmasDataAsync(string businessId, string registCode, double valueCO, double valueHC, double valueNO, double testSetPower, double totalDistance, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd) {
            this.vmasDataAsync(businessId, registCode, valueCO, valueHC, valueNO, testSetPower, totalDistance, tempreture, humidity, airPressure, timeStart, timeEnd, null);
        }
        
        /// <remarks/>
        public void vmasDataAsync(string businessId, string registCode, double valueCO, double valueHC, double valueNO, double testSetPower, double totalDistance, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, object userState) {
            if ((this.vmasDataOperationCompleted == null)) {
                this.vmasDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvmasDataOperationCompleted);
            }
            this.InvokeAsync("vmasData", new object[] {
                        businessId,
                        registCode,
                        valueCO,
                        valueHC,
                        valueNO,
                        testSetPower,
                        totalDistance,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, this.vmasDataOperationCompleted, userState);
        }
        
        private void OnvmasDataOperationCompleted(object arg) {
            if ((this.vmasDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.vmasDataCompleted(this, new vmasDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getSatate([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode) {
            object[] results = this.Invoke("getSatate", new object[] {
                        registCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetSatate(string registCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getSatate", new object[] {
                        registCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetSatate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSatateAsync(string registCode) {
            this.getSatateAsync(registCode, null);
        }
        
        /// <remarks/>
        public void getSatateAsync(string registCode, object userState) {
            if ((this.getSatateOperationCompleted == null)) {
                this.getSatateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSatateOperationCompleted);
            }
            this.InvokeAsync("getSatate", new object[] {
                        registCode}, this.getSatateOperationCompleted, userState);
        }
        
        private void OngetSatateOperationCompleted(object arg) {
            if ((this.getSatateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSatateCompleted(this, new getSatateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getAsmLimit([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId) {
            object[] results = this.Invoke("getAsmLimit", new object[] {
                        registCode,
                        businessId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetAsmLimit(string registCode, string businessId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getAsmLimit", new object[] {
                        registCode,
                        businessId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetAsmLimit(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAsmLimitAsync(string registCode, string businessId) {
            this.getAsmLimitAsync(registCode, businessId, null);
        }
        
        /// <remarks/>
        public void getAsmLimitAsync(string registCode, string businessId, object userState) {
            if ((this.getAsmLimitOperationCompleted == null)) {
                this.getAsmLimitOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAsmLimitOperationCompleted);
            }
            this.InvokeAsync("getAsmLimit", new object[] {
                        registCode,
                        businessId}, this.getAsmLimitOperationCompleted, userState);
        }
        
        private void OngetAsmLimitOperationCompleted(object arg) {
            if ((this.getAsmLimitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAsmLimitCompleted(this, new getAsmLimitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string bgAirHC([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double bgCO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double bgNO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double bgHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double canliuHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string lFlowResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double o2Avg, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("bgAirHC", new object[] {
                        businessId,
                        registCode,
                        bgCO,
                        bgNO,
                        bgHC,
                        canliuHC,
                        lFlowResult,
                        o2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginbgAirHC(string businessId, string registCode, double bgCO, double bgNO, double bgHC, double canliuHC, string lFlowResult, double o2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("bgAirHC", new object[] {
                        businessId,
                        registCode,
                        bgCO,
                        bgNO,
                        bgHC,
                        canliuHC,
                        lFlowResult,
                        o2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndbgAirHC(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void bgAirHCAsync(string businessId, string registCode, double bgCO, double bgNO, double bgHC, double canliuHC, string lFlowResult, double o2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.bgAirHCAsync(businessId, registCode, bgCO, bgNO, bgHC, canliuHC, lFlowResult, o2Avg, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void bgAirHCAsync(string businessId, string registCode, double bgCO, double bgNO, double bgHC, double canliuHC, string lFlowResult, double o2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.bgAirHCOperationCompleted == null)) {
                this.bgAirHCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbgAirHCOperationCompleted);
            }
            this.InvokeAsync("bgAirHC", new object[] {
                        businessId,
                        registCode,
                        bgCO,
                        bgNO,
                        bgHC,
                        canliuHC,
                        lFlowResult,
                        o2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.bgAirHCOperationCompleted, userState);
        }
        
        private void OnbgAirHCOperationCompleted(object arg) {
            if ((this.bgAirHCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bgAirHCCompleted(this, new bgAirHCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string vasmLog(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int inspectNum, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double clzHC, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double clzCO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double clzNO, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double cs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double zs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double clzO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double clzCO2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double xsxzxs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double sdxzxs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double totalPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double parasPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double indicPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirTemperature, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirAirPressure, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirHumidity, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double yw) {
            object[] results = this.Invoke("vasmLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        clzHC,
                        clzCO,
                        clzNO,
                        cs,
                        zs,
                        clzO2,
                        clzCO2,
                        xsxzxs,
                        sdxzxs,
                        totalPower,
                        parasPower,
                        indicPower,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        yw});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginvasmLog(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double clzHC, 
                    double clzCO, 
                    double clzNO, 
                    double cs, 
                    double zs, 
                    double clzO2, 
                    double clzCO2, 
                    double xsxzxs, 
                    double sdxzxs, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double yw, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("vasmLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        clzHC,
                        clzCO,
                        clzNO,
                        cs,
                        zs,
                        clzO2,
                        clzCO2,
                        xsxzxs,
                        sdxzxs,
                        totalPower,
                        parasPower,
                        indicPower,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        yw}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndvasmLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void vasmLogAsync(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double clzHC, 
                    double clzCO, 
                    double clzNO, 
                    double cs, 
                    double zs, 
                    double clzO2, 
                    double clzCO2, 
                    double xsxzxs, 
                    double sdxzxs, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double yw) {
            this.vasmLogAsync(businessId, registCode, inspectNum, clzHC, clzCO, clzNO, cs, zs, clzO2, clzCO2, xsxzxs, sdxzxs, totalPower, parasPower, indicPower, envirTemperature, envirAirPressure, envirHumidity, yw, null);
        }
        
        /// <remarks/>
        public void vasmLogAsync(
                    string businessId, 
                    string registCode, 
                    int inspectNum, 
                    double clzHC, 
                    double clzCO, 
                    double clzNO, 
                    double cs, 
                    double zs, 
                    double clzO2, 
                    double clzCO2, 
                    double xsxzxs, 
                    double sdxzxs, 
                    double totalPower, 
                    double parasPower, 
                    double indicPower, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double yw, 
                    object userState) {
            if ((this.vasmLogOperationCompleted == null)) {
                this.vasmLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvasmLogOperationCompleted);
            }
            this.InvokeAsync("vasmLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        clzHC,
                        clzCO,
                        clzNO,
                        cs,
                        zs,
                        clzO2,
                        clzCO2,
                        xsxzxs,
                        sdxzxs,
                        totalPower,
                        parasPower,
                        indicPower,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        yw}, this.vasmLogOperationCompleted, userState);
        }
        
        private void OnvasmLogOperationCompleted(object arg) {
            if ((this.vasmLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.vasmLogCompleted(this, new vasmLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string hjcsgyqSelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actualTemperature, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double temperature, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actualHumidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actualAirPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("hjcsgyqSelfcheck", new object[] {
                        registCode,
                        actualTemperature,
                        temperature,
                        actualHumidity,
                        humidity,
                        actualAirPressure,
                        airPressure,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginhjcsgyqSelfcheck(string registCode, double actualTemperature, double temperature, double actualHumidity, double humidity, double actualAirPressure, double airPressure, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("hjcsgyqSelfcheck", new object[] {
                        registCode,
                        actualTemperature,
                        temperature,
                        actualHumidity,
                        humidity,
                        actualAirPressure,
                        airPressure,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndhjcsgyqSelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void hjcsgyqSelfcheckAsync(string registCode, double actualTemperature, double temperature, double actualHumidity, double humidity, double actualAirPressure, double airPressure, string checkTimeStart, string checkTimeEnd, string remark) {
            this.hjcsgyqSelfcheckAsync(registCode, actualTemperature, temperature, actualHumidity, humidity, actualAirPressure, airPressure, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void hjcsgyqSelfcheckAsync(string registCode, double actualTemperature, double temperature, double actualHumidity, double humidity, double actualAirPressure, double airPressure, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.hjcsgyqSelfcheckOperationCompleted == null)) {
                this.hjcsgyqSelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnhjcsgyqSelfcheckOperationCompleted);
            }
            this.InvokeAsync("hjcsgyqSelfcheck", new object[] {
                        registCode,
                        actualTemperature,
                        temperature,
                        actualHumidity,
                        humidity,
                        actualAirPressure,
                        airPressure,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.hjcsgyqSelfcheckOperationCompleted, userState);
        }
        
        private void OnhjcsgyqSelfcheckOperationCompleted(object arg) {
            if ((this.hjcsgyqSelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.hjcsgyqSelfcheckCompleted(this, new hjcsgyqSelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string softVersion([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string version) {
            object[] results = this.Invoke("softVersion", new object[] {
                        registCode,
                        version});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsoftVersion(string registCode, string version, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("softVersion", new object[] {
                        registCode,
                        version}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsoftVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void softVersionAsync(string registCode, string version) {
            this.softVersionAsync(registCode, version, null);
        }
        
        /// <remarks/>
        public void softVersionAsync(string registCode, string version, object userState) {
            if ((this.softVersionOperationCompleted == null)) {
                this.softVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsoftVersionOperationCompleted);
            }
            this.InvokeAsync("softVersion", new object[] {
                        registCode,
                        version}, this.softVersionOperationCompleted, userState);
        }
        
        private void OnsoftVersionOperationCompleted(object arg) {
            if ((this.softVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.softVersionCompleted(this, new softVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string cgjPLHPSelfcheck(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string speedQJ1, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double nameSpeed1, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double PLHP1, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string speedQJ2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double nameSpeed2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double PLHP2, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string speedQJ3, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double nameSpeed3, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double PLHP3, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string speedQJ4, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double nameSpeed4, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double PLHP4, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double maxSpeed, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("cgjPLHPSelfcheck", new object[] {
                        registCode,
                        speedQJ1,
                        nameSpeed1,
                        PLHP1,
                        speedQJ2,
                        nameSpeed2,
                        PLHP2,
                        speedQJ3,
                        nameSpeed3,
                        PLHP3,
                        speedQJ4,
                        nameSpeed4,
                        PLHP4,
                        maxSpeed,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincgjPLHPSelfcheck(
                    string registCode, 
                    string speedQJ1, 
                    double nameSpeed1, 
                    double PLHP1, 
                    string speedQJ2, 
                    double nameSpeed2, 
                    double PLHP2, 
                    string speedQJ3, 
                    double nameSpeed3, 
                    double PLHP3, 
                    string speedQJ4, 
                    double nameSpeed4, 
                    double PLHP4, 
                    double maxSpeed, 
                    string checkResult, 
                    string checkTimeStart, 
                    string checkTimeEnd, 
                    string remark, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("cgjPLHPSelfcheck", new object[] {
                        registCode,
                        speedQJ1,
                        nameSpeed1,
                        PLHP1,
                        speedQJ2,
                        nameSpeed2,
                        PLHP2,
                        speedQJ3,
                        nameSpeed3,
                        PLHP3,
                        speedQJ4,
                        nameSpeed4,
                        PLHP4,
                        maxSpeed,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndcgjPLHPSelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cgjPLHPSelfcheckAsync(
                    string registCode, 
                    string speedQJ1, 
                    double nameSpeed1, 
                    double PLHP1, 
                    string speedQJ2, 
                    double nameSpeed2, 
                    double PLHP2, 
                    string speedQJ3, 
                    double nameSpeed3, 
                    double PLHP3, 
                    string speedQJ4, 
                    double nameSpeed4, 
                    double PLHP4, 
                    double maxSpeed, 
                    string checkResult, 
                    string checkTimeStart, 
                    string checkTimeEnd, 
                    string remark) {
            this.cgjPLHPSelfcheckAsync(registCode, speedQJ1, nameSpeed1, PLHP1, speedQJ2, nameSpeed2, PLHP2, speedQJ3, nameSpeed3, PLHP3, speedQJ4, nameSpeed4, PLHP4, maxSpeed, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void cgjPLHPSelfcheckAsync(
                    string registCode, 
                    string speedQJ1, 
                    double nameSpeed1, 
                    double PLHP1, 
                    string speedQJ2, 
                    double nameSpeed2, 
                    double PLHP2, 
                    string speedQJ3, 
                    double nameSpeed3, 
                    double PLHP3, 
                    string speedQJ4, 
                    double nameSpeed4, 
                    double PLHP4, 
                    double maxSpeed, 
                    string checkResult, 
                    string checkTimeStart, 
                    string checkTimeEnd, 
                    string remark, 
                    object userState) {
            if ((this.cgjPLHPSelfcheckOperationCompleted == null)) {
                this.cgjPLHPSelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OncgjPLHPSelfcheckOperationCompleted);
            }
            this.InvokeAsync("cgjPLHPSelfcheck", new object[] {
                        registCode,
                        speedQJ1,
                        nameSpeed1,
                        PLHP1,
                        speedQJ2,
                        nameSpeed2,
                        PLHP2,
                        speedQJ3,
                        nameSpeed3,
                        PLHP3,
                        speedQJ4,
                        nameSpeed4,
                        PLHP4,
                        maxSpeed,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.cgjPLHPSelfcheckOperationCompleted, userState);
        }
        
        private void OncgjPLHPSelfcheckOperationCompleted(object arg) {
            if ((this.cgjPLHPSelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cgjPLHPSelfcheckCompleted(this, new cgjPLHPSelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getCarInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode) {
            object[] results = this.Invoke("getCarInfo", new object[] {
                        businessId,
                        registCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCarInfo(string businessId, string registCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCarInfo", new object[] {
                        businessId,
                        registCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetCarInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCarInfoAsync(string businessId, string registCode) {
            this.getCarInfoAsync(businessId, registCode, null);
        }
        
        /// <remarks/>
        public void getCarInfoAsync(string businessId, string registCode, object userState) {
            if ((this.getCarInfoOperationCompleted == null)) {
                this.getCarInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCarInfoOperationCompleted);
            }
            this.InvokeAsync("getCarInfo", new object[] {
                        businessId,
                        registCode}, this.getCarInfoOperationCompleted, userState);
        }
        
        private void OngetCarInfoOperationCompleted(object arg) {
            if ((this.getCarInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCarInfoCompleted(this, new getCarInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string wqfxySelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string tightnessResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("wqfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginwqfxySelfcheck(string registCode, string tightnessResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("wqfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndwqfxySelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void wqfxySelfcheckAsync(string registCode, string tightnessResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.wqfxySelfcheckAsync(registCode, tightnessResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void wqfxySelfcheckAsync(string registCode, string tightnessResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.wqfxySelfcheckOperationCompleted == null)) {
                this.wqfxySelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwqfxySelfcheckOperationCompleted);
            }
            this.InvokeAsync("wqfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.wqfxySelfcheckOperationCompleted, userState);
        }
        
        private void OnwqfxySelfcheckOperationCompleted(object arg) {
            if ((this.wqfxySelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wqfxySelfcheckCompleted(this, new wqfxySelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string vasmData(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hc5025, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double co5025, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double no5025, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double fdjzs5025, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double fdjyw5025, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hc2540, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double co2540, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double no2540, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double fdjzs2540, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double fdjyw2540, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd) {
            object[] results = this.Invoke("vasmData", new object[] {
                        businessId,
                        registCode,
                        hc5025,
                        co5025,
                        no5025,
                        fdjzs5025,
                        fdjyw5025,
                        hc2540,
                        co2540,
                        no2540,
                        fdjzs2540,
                        fdjyw2540,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginvasmData(
                    string businessId, 
                    string registCode, 
                    double hc5025, 
                    double co5025, 
                    double no5025, 
                    double fdjzs5025, 
                    double fdjyw5025, 
                    double hc2540, 
                    double co2540, 
                    double no2540, 
                    double fdjzs2540, 
                    double fdjyw2540, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("vasmData", new object[] {
                        businessId,
                        registCode,
                        hc5025,
                        co5025,
                        no5025,
                        fdjzs5025,
                        fdjyw5025,
                        hc2540,
                        co2540,
                        no2540,
                        fdjzs2540,
                        fdjyw2540,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndvasmData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void vasmDataAsync(
                    string businessId, 
                    string registCode, 
                    double hc5025, 
                    double co5025, 
                    double no5025, 
                    double fdjzs5025, 
                    double fdjyw5025, 
                    double hc2540, 
                    double co2540, 
                    double no2540, 
                    double fdjzs2540, 
                    double fdjyw2540, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd) {
            this.vasmDataAsync(businessId, registCode, hc5025, co5025, no5025, fdjzs5025, fdjyw5025, hc2540, co2540, no2540, fdjzs2540, fdjyw2540, tempreture, humidity, airPressure, timeStart, timeEnd, null);
        }
        
        /// <remarks/>
        public void vasmDataAsync(
                    string businessId, 
                    string registCode, 
                    double hc5025, 
                    double co5025, 
                    double no5025, 
                    double fdjzs5025, 
                    double fdjyw5025, 
                    double hc2540, 
                    double co2540, 
                    double no2540, 
                    double fdjzs2540, 
                    double fdjyw2540, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    object userState) {
            if ((this.vasmDataOperationCompleted == null)) {
                this.vasmDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvasmDataOperationCompleted);
            }
            this.InvokeAsync("vasmData", new object[] {
                        businessId,
                        registCode,
                        hc5025,
                        co5025,
                        no5025,
                        fdjzs5025,
                        fdjyw5025,
                        hc2540,
                        co2540,
                        no2540,
                        fdjzs2540,
                        fdjyw2540,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, this.vasmDataOperationCompleted, userState);
        }
        
        private void OnvasmDataOperationCompleted(object arg) {
            if ((this.vasmDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.vasmDataCompleted(this, new vasmDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string motoDbIdleData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hCO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hCO2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hIdleSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double HC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double CO, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double CO2, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double idleSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd) {
            object[] results = this.Invoke("motoDbIdleData", new object[] {
                        businessId,
                        registCode,
                        hHC,
                        hCO,
                        hCO2,
                        hIdleSpeed,
                        HC,
                        CO,
                        CO2,
                        idleSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginmotoDbIdleData(
                    string businessId, 
                    string registCode, 
                    double hHC, 
                    double hCO, 
                    double hCO2, 
                    double hIdleSpeed, 
                    double HC, 
                    double CO, 
                    double CO2, 
                    double idleSpeed, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("motoDbIdleData", new object[] {
                        businessId,
                        registCode,
                        hHC,
                        hCO,
                        hCO2,
                        hIdleSpeed,
                        HC,
                        CO,
                        CO2,
                        idleSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndmotoDbIdleData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void motoDbIdleDataAsync(string businessId, string registCode, double hHC, double hCO, double hCO2, double hIdleSpeed, double HC, double CO, double CO2, double idleSpeed, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd) {
            this.motoDbIdleDataAsync(businessId, registCode, hHC, hCO, hCO2, hIdleSpeed, HC, CO, CO2, idleSpeed, tempreture, humidity, airPressure, timeStart, timeEnd, null);
        }
        
        /// <remarks/>
        public void motoDbIdleDataAsync(
                    string businessId, 
                    string registCode, 
                    double hHC, 
                    double hCO, 
                    double hCO2, 
                    double hIdleSpeed, 
                    double HC, 
                    double CO, 
                    double CO2, 
                    double idleSpeed, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    object userState) {
            if ((this.motoDbIdleDataOperationCompleted == null)) {
                this.motoDbIdleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmotoDbIdleDataOperationCompleted);
            }
            this.InvokeAsync("motoDbIdleData", new object[] {
                        businessId,
                        registCode,
                        hHC,
                        hCO,
                        hCO2,
                        hIdleSpeed,
                        HC,
                        CO,
                        CO2,
                        idleSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, this.motoDbIdleDataOperationCompleted, userState);
        }
        
        private void OnmotoDbIdleDataOperationCompleted(object arg) {
            if ((this.motoDbIdleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.motoDbIdleDataCompleted(this, new motoDbIdleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LightproofSmokeLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int inspectNum, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int conditionType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checktime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speed) {
            object[] results = this.Invoke("LightproofSmokeLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        conditionType,
                        checktime,
                        smokeValue,
                        speed});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLightproofSmokeLog(string businessId, string registCode, int inspectNum, int conditionType, string checktime, double smokeValue, double speed, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LightproofSmokeLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        conditionType,
                        checktime,
                        smokeValue,
                        speed}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndLightproofSmokeLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LightproofSmokeLogAsync(string businessId, string registCode, int inspectNum, int conditionType, string checktime, double smokeValue, double speed) {
            this.LightproofSmokeLogAsync(businessId, registCode, inspectNum, conditionType, checktime, smokeValue, speed, null);
        }
        
        /// <remarks/>
        public void LightproofSmokeLogAsync(string businessId, string registCode, int inspectNum, int conditionType, string checktime, double smokeValue, double speed, object userState) {
            if ((this.LightproofSmokeLogOperationCompleted == null)) {
                this.LightproofSmokeLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLightproofSmokeLogOperationCompleted);
            }
            this.InvokeAsync("LightproofSmokeLog", new object[] {
                        businessId,
                        registCode,
                        inspectNum,
                        conditionType,
                        checktime,
                        smokeValue,
                        speed}, this.LightproofSmokeLogOperationCompleted, userState);
        }
        
        private void OnLightproofSmokeLogOperationCompleted(object arg) {
            if ((this.LightproofSmokeLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LightproofSmokeLogCompleted(this, new LightproofSmokeLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getCheckResult([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId) {
            object[] results = this.Invoke("getCheckResult", new object[] {
                        registCode,
                        businessId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegingetCheckResult(string registCode, string businessId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("getCheckResult", new object[] {
                        registCode,
                        businessId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndgetCheckResult(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCheckResultAsync(string registCode, string businessId) {
            this.getCheckResultAsync(registCode, businessId, null);
        }
        
        /// <remarks/>
        public void getCheckResultAsync(string registCode, string businessId, object userState) {
            if ((this.getCheckResultOperationCompleted == null)) {
                this.getCheckResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCheckResultOperationCompleted);
            }
            this.InvokeAsync("getCheckResult", new object[] {
                        registCode,
                        businessId}, this.getCheckResultOperationCompleted, userState);
        }
        
        private void OngetCheckResultOperationCompleted(object arg) {
            if ((this.getCheckResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCheckResultCompleted(this, new getCheckResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string lljSelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double avgFlow, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double O2Avg, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("lljSelfcheck", new object[] {
                        registCode,
                        avgFlow,
                        O2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginlljSelfcheck(string registCode, double avgFlow, double O2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("lljSelfcheck", new object[] {
                        registCode,
                        avgFlow,
                        O2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndlljSelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void lljSelfcheckAsync(string registCode, double avgFlow, double O2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.lljSelfcheckAsync(registCode, avgFlow, O2Avg, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void lljSelfcheckAsync(string registCode, double avgFlow, double O2Avg, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.lljSelfcheckOperationCompleted == null)) {
                this.lljSelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlljSelfcheckOperationCompleted);
            }
            this.InvokeAsync("lljSelfcheck", new object[] {
                        registCode,
                        avgFlow,
                        O2Avg,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.lljSelfcheckOperationCompleted, userState);
        }
        
        private void OnlljSelfcheckOperationCompleted(object arg) {
            if ((this.lljSelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.lljSelfcheckCompleted(this, new lljSelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string sdsqtfxySelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string tightnessResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string lFlowResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double canliuHC, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("sdsqtfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        lFlowResult,
                        canliuHC,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsdsqtfxySelfcheck(string registCode, string tightnessResult, string lFlowResult, double canliuHC, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("sdsqtfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        lFlowResult,
                        canliuHC,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsdsqtfxySelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sdsqtfxySelfcheckAsync(string registCode, string tightnessResult, string lFlowResult, double canliuHC, string checkResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.sdsqtfxySelfcheckAsync(registCode, tightnessResult, lFlowResult, canliuHC, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void sdsqtfxySelfcheckAsync(string registCode, string tightnessResult, string lFlowResult, double canliuHC, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.sdsqtfxySelfcheckOperationCompleted == null)) {
                this.sdsqtfxySelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsdsqtfxySelfcheckOperationCompleted);
            }
            this.InvokeAsync("sdsqtfxySelfcheck", new object[] {
                        registCode,
                        tightnessResult,
                        lFlowResult,
                        canliuHC,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.sdsqtfxySelfcheckOperationCompleted, userState);
        }
        
        private void OnsdsqtfxySelfcheckOperationCompleted(object arg) {
            if ((this.sdsqtfxySelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sdsqtfxySelfcheckCompleted(this, new sdsqtfxySelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string doubleIdleData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double lrotateSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hrotateSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double coLowValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hcLowValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double coHighValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double hcHighValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double lambdaValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd) {
            object[] results = this.Invoke("doubleIdleData", new object[] {
                        businessId,
                        registCode,
                        lrotateSpeed,
                        hrotateSpeed,
                        coLowValue,
                        hcLowValue,
                        coHighValue,
                        hcHighValue,
                        lambdaValue,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegindoubleIdleData(
                    string businessId, 
                    string registCode, 
                    double lrotateSpeed, 
                    double hrotateSpeed, 
                    double coLowValue, 
                    double hcLowValue, 
                    double coHighValue, 
                    double hcHighValue, 
                    double lambdaValue, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("doubleIdleData", new object[] {
                        businessId,
                        registCode,
                        lrotateSpeed,
                        hrotateSpeed,
                        coLowValue,
                        hcLowValue,
                        coHighValue,
                        hcHighValue,
                        lambdaValue,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EnddoubleIdleData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void doubleIdleDataAsync(string businessId, string registCode, double lrotateSpeed, double hrotateSpeed, double coLowValue, double hcLowValue, double coHighValue, double hcHighValue, double lambdaValue, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd) {
            this.doubleIdleDataAsync(businessId, registCode, lrotateSpeed, hrotateSpeed, coLowValue, hcLowValue, coHighValue, hcHighValue, lambdaValue, tempreture, humidity, airPressure, timeStart, timeEnd, null);
        }
        
        /// <remarks/>
        public void doubleIdleDataAsync(string businessId, string registCode, double lrotateSpeed, double hrotateSpeed, double coLowValue, double hcLowValue, double coHighValue, double hcHighValue, double lambdaValue, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, object userState) {
            if ((this.doubleIdleDataOperationCompleted == null)) {
                this.doubleIdleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoubleIdleDataOperationCompleted);
            }
            this.InvokeAsync("doubleIdleData", new object[] {
                        businessId,
                        registCode,
                        lrotateSpeed,
                        hrotateSpeed,
                        coLowValue,
                        hcLowValue,
                        coHighValue,
                        hcHighValue,
                        lambdaValue,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, this.doubleIdleDataOperationCompleted, userState);
        }
        
        private void OndoubleIdleDataOperationCompleted(object arg) {
            if ((this.doubleIdleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doubleIdleDataCompleted(this, new doubleIdleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string loadDownLog(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string conditionType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int inspectNum, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double calVelMaxHp, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actVelMaxHp, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double powerPerSec, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speedPerSec, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double actMaxPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double rotateSpeed, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirTemperature, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirAirPressure, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double envirHumidity, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double powerCorrect, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double corMaxPower, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK100, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK90, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK80, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speedK100, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speedK90, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speedK80) {
            object[] results = this.Invoke("loadDownLog", new object[] {
                        businessId,
                        registCode,
                        conditionType,
                        inspectNum,
                        calVelMaxHp,
                        actVelMaxHp,
                        powerPerSec,
                        speedPerSec,
                        actMaxPower,
                        rotateSpeed,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        powerCorrect,
                        corMaxPower,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        speedK100,
                        speedK90,
                        speedK80});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginloadDownLog(
                    string businessId, 
                    string registCode, 
                    string conditionType, 
                    int inspectNum, 
                    double calVelMaxHp, 
                    double actVelMaxHp, 
                    double powerPerSec, 
                    double speedPerSec, 
                    double actMaxPower, 
                    double rotateSpeed, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double powerCorrect, 
                    double corMaxPower, 
                    double smokeK100, 
                    double smokeK90, 
                    double smokeK80, 
                    double speedK100, 
                    double speedK90, 
                    double speedK80, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("loadDownLog", new object[] {
                        businessId,
                        registCode,
                        conditionType,
                        inspectNum,
                        calVelMaxHp,
                        actVelMaxHp,
                        powerPerSec,
                        speedPerSec,
                        actMaxPower,
                        rotateSpeed,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        powerCorrect,
                        corMaxPower,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        speedK100,
                        speedK90,
                        speedK80}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndloadDownLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loadDownLogAsync(
                    string businessId, 
                    string registCode, 
                    string conditionType, 
                    int inspectNum, 
                    double calVelMaxHp, 
                    double actVelMaxHp, 
                    double powerPerSec, 
                    double speedPerSec, 
                    double actMaxPower, 
                    double rotateSpeed, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double powerCorrect, 
                    double corMaxPower, 
                    double smokeK100, 
                    double smokeK90, 
                    double smokeK80, 
                    double speedK100, 
                    double speedK90, 
                    double speedK80) {
            this.loadDownLogAsync(businessId, registCode, conditionType, inspectNum, calVelMaxHp, actVelMaxHp, powerPerSec, speedPerSec, actMaxPower, rotateSpeed, envirTemperature, envirAirPressure, envirHumidity, powerCorrect, corMaxPower, smokeK100, smokeK90, smokeK80, speedK100, speedK90, speedK80, null);
        }
        
        /// <remarks/>
        public void loadDownLogAsync(
                    string businessId, 
                    string registCode, 
                    string conditionType, 
                    int inspectNum, 
                    double calVelMaxHp, 
                    double actVelMaxHp, 
                    double powerPerSec, 
                    double speedPerSec, 
                    double actMaxPower, 
                    double rotateSpeed, 
                    double envirTemperature, 
                    double envirAirPressure, 
                    double envirHumidity, 
                    double powerCorrect, 
                    double corMaxPower, 
                    double smokeK100, 
                    double smokeK90, 
                    double smokeK80, 
                    double speedK100, 
                    double speedK90, 
                    double speedK80, 
                    object userState) {
            if ((this.loadDownLogOperationCompleted == null)) {
                this.loadDownLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloadDownLogOperationCompleted);
            }
            this.InvokeAsync("loadDownLog", new object[] {
                        businessId,
                        registCode,
                        conditionType,
                        inspectNum,
                        calVelMaxHp,
                        actVelMaxHp,
                        powerPerSec,
                        speedPerSec,
                        actMaxPower,
                        rotateSpeed,
                        envirTemperature,
                        envirAirPressure,
                        envirHumidity,
                        powerCorrect,
                        corMaxPower,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        speedK100,
                        speedK90,
                        speedK80}, this.loadDownLogOperationCompleted, userState);
        }
        
        private void OnloadDownLogOperationCompleted(object arg) {
            if ((this.loadDownLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loadDownLogCompleted(this, new loadDownLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string ydjSelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string zeroResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueN50, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double labelValueN70, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double N50, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double N70, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double error50, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double error70, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("ydjSelfcheck", new object[] {
                        registCode,
                        zeroResult,
                        labelValueN50,
                        labelValueN70,
                        N50,
                        N70,
                        error50,
                        error70,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginydjSelfcheck(string registCode, string zeroResult, double labelValueN50, double labelValueN70, double N50, double N70, double error50, double error70, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ydjSelfcheck", new object[] {
                        registCode,
                        zeroResult,
                        labelValueN50,
                        labelValueN70,
                        N50,
                        N70,
                        error50,
                        error70,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndydjSelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ydjSelfcheckAsync(string registCode, string zeroResult, double labelValueN50, double labelValueN70, double N50, double N70, double error50, double error70, string checkResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.ydjSelfcheckAsync(registCode, zeroResult, labelValueN50, labelValueN70, N50, N70, error50, error70, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void ydjSelfcheckAsync(string registCode, string zeroResult, double labelValueN50, double labelValueN70, double N50, double N70, double error50, double error70, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.ydjSelfcheckOperationCompleted == null)) {
                this.ydjSelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnydjSelfcheckOperationCompleted);
            }
            this.InvokeAsync("ydjSelfcheck", new object[] {
                        registCode,
                        zeroResult,
                        labelValueN50,
                        labelValueN70,
                        N50,
                        N70,
                        error50,
                        error70,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.ydjSelfcheckOperationCompleted, userState);
        }
        
        private void OnydjSelfcheckOperationCompleted(object arg) {
            if ((this.ydjSelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ydjSelfcheckCompleted(this, new ydjSelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string cgjSelfcheck([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double HVitualTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double HrealTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double LvitualTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double LrealTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double Hpower, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double Lpower, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkResult, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string checkTimeEnd, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("cgjSelfcheck", new object[] {
                        registCode,
                        HVitualTime,
                        HrealTime,
                        LvitualTime,
                        LrealTime,
                        Hpower,
                        Lpower,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BegincgjSelfcheck(string registCode, double HVitualTime, double HrealTime, double LvitualTime, double LrealTime, double Hpower, double Lpower, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("cgjSelfcheck", new object[] {
                        registCode,
                        HVitualTime,
                        HrealTime,
                        LvitualTime,
                        LrealTime,
                        Hpower,
                        Lpower,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndcgjSelfcheck(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cgjSelfcheckAsync(string registCode, double HVitualTime, double HrealTime, double LvitualTime, double LrealTime, double Hpower, double Lpower, string checkResult, string checkTimeStart, string checkTimeEnd, string remark) {
            this.cgjSelfcheckAsync(registCode, HVitualTime, HrealTime, LvitualTime, LrealTime, Hpower, Lpower, checkResult, checkTimeStart, checkTimeEnd, remark, null);
        }
        
        /// <remarks/>
        public void cgjSelfcheckAsync(string registCode, double HVitualTime, double HrealTime, double LvitualTime, double LrealTime, double Hpower, double Lpower, string checkResult, string checkTimeStart, string checkTimeEnd, string remark, object userState) {
            if ((this.cgjSelfcheckOperationCompleted == null)) {
                this.cgjSelfcheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OncgjSelfcheckOperationCompleted);
            }
            this.InvokeAsync("cgjSelfcheck", new object[] {
                        registCode,
                        HVitualTime,
                        HrealTime,
                        LvitualTime,
                        LrealTime,
                        Hpower,
                        Lpower,
                        checkResult,
                        checkTimeStart,
                        checkTimeEnd,
                        remark}, this.cgjSelfcheckOperationCompleted, userState);
        }
        
        private void OncgjSelfcheckOperationCompleted(object arg) {
            if ((this.cgjSelfcheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cgjSelfcheckCompleted(this, new cgjSelfcheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string loadDownData([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string businessId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK100, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK90, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double smokeK80, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double power, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double speed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double mortorSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double idleRotateSpeed, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double tempreture, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double humidity, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] double airPressure, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeStart, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string timeEnd) {
            object[] results = this.Invoke("loadDownData", new object[] {
                        businessId,
                        registCode,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        power,
                        speed,
                        mortorSpeed,
                        idleRotateSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginloadDownData(
                    string businessId, 
                    string registCode, 
                    double smokeK100, 
                    double smokeK90, 
                    double smokeK80, 
                    double power, 
                    double speed, 
                    double mortorSpeed, 
                    double idleRotateSpeed, 
                    double tempreture, 
                    double humidity, 
                    double airPressure, 
                    string timeStart, 
                    string timeEnd, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("loadDownData", new object[] {
                        businessId,
                        registCode,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        power,
                        speed,
                        mortorSpeed,
                        idleRotateSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndloadDownData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void loadDownDataAsync(string businessId, string registCode, double smokeK100, double smokeK90, double smokeK80, double power, double speed, double mortorSpeed, double idleRotateSpeed, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd) {
            this.loadDownDataAsync(businessId, registCode, smokeK100, smokeK90, smokeK80, power, speed, mortorSpeed, idleRotateSpeed, tempreture, humidity, airPressure, timeStart, timeEnd, null);
        }
        
        /// <remarks/>
        public void loadDownDataAsync(string businessId, string registCode, double smokeK100, double smokeK90, double smokeK80, double power, double speed, double mortorSpeed, double idleRotateSpeed, double tempreture, double humidity, double airPressure, string timeStart, string timeEnd, object userState) {
            if ((this.loadDownDataOperationCompleted == null)) {
                this.loadDownDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloadDownDataOperationCompleted);
            }
            this.InvokeAsync("loadDownData", new object[] {
                        businessId,
                        registCode,
                        smokeK100,
                        smokeK90,
                        smokeK80,
                        power,
                        speed,
                        mortorSpeed,
                        idleRotateSpeed,
                        tempreture,
                        humidity,
                        airPressure,
                        timeStart,
                        timeEnd}, this.loadDownDataOperationCompleted, userState);
        }
        
        private void OnloadDownDataOperationCompleted(object arg) {
            if ((this.loadDownDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loadDownDataCompleted(this, new loadDownDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://iface.server.webservice.zkyt.com/", ResponseNamespace="http://iface.server.webservice.zkyt.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string argChang([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string registCode, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string argName, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string oldValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string newValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string changeTime, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string remark) {
            object[] results = this.Invoke("argChang", new object[] {
                        registCode,
                        argName,
                        oldValue,
                        newValue,
                        changeTime,
                        remark});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginargChang(string registCode, string argName, string oldValue, string newValue, string changeTime, string remark, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("argChang", new object[] {
                        registCode,
                        argName,
                        oldValue,
                        newValue,
                        changeTime,
                        remark}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndargChang(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void argChangAsync(string registCode, string argName, string oldValue, string newValue, string changeTime, string remark) {
            this.argChangAsync(registCode, argName, oldValue, newValue, changeTime, remark, null);
        }
        
        /// <remarks/>
        public void argChangAsync(string registCode, string argName, string oldValue, string newValue, string changeTime, string remark, object userState) {
            if ((this.argChangOperationCompleted == null)) {
                this.argChangOperationCompleted = new System.Threading.SendOrPostCallback(this.OnargChangOperationCompleted);
            }
            this.InvokeAsync("argChang", new object[] {
                        registCode,
                        argName,
                        oldValue,
                        newValue,
                        changeTime,
                        remark}, this.argChangOperationCompleted, userState);
        }
        
        private void OnargChangOperationCompleted(object arg) {
            if ((this.argChangCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.argChangCompleted(this, new argChangCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void wqfxyAdjustCompletedEventHandler(object sender, wqfxyAdjustCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wqfxyAdjustCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wqfxyAdjustCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void lightproofSmokeDataCompletedEventHandler(object sender, lightproofSmokeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class lightproofSmokeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal lightproofSmokeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void sendMessageCompletedEventHandler(object sender, sendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getServerTimeCompletedEventHandler(object sender, getServerTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void doubleIdleLogCompletedEventHandler(object sender, doubleIdleLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doubleIdleLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doubleIdleLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void vmasLogCompletedEventHandler(object sender, vmasLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class vmasLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal vmasLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void vmasDataCompletedEventHandler(object sender, vmasDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class vmasDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal vmasDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getSatateCompletedEventHandler(object sender, getSatateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSatateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSatateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getAsmLimitCompletedEventHandler(object sender, getAsmLimitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAsmLimitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAsmLimitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void bgAirHCCompletedEventHandler(object sender, bgAirHCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bgAirHCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bgAirHCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void vasmLogCompletedEventHandler(object sender, vasmLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class vasmLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal vasmLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void hjcsgyqSelfcheckCompletedEventHandler(object sender, hjcsgyqSelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class hjcsgyqSelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal hjcsgyqSelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void softVersionCompletedEventHandler(object sender, softVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class softVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal softVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void cgjPLHPSelfcheckCompletedEventHandler(object sender, cgjPLHPSelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cgjPLHPSelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cgjPLHPSelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getCarInfoCompletedEventHandler(object sender, getCarInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCarInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCarInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void wqfxySelfcheckCompletedEventHandler(object sender, wqfxySelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wqfxySelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wqfxySelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void vasmDataCompletedEventHandler(object sender, vasmDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class vasmDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal vasmDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void motoDbIdleDataCompletedEventHandler(object sender, motoDbIdleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class motoDbIdleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal motoDbIdleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void LightproofSmokeLogCompletedEventHandler(object sender, LightproofSmokeLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LightproofSmokeLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LightproofSmokeLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void getCheckResultCompletedEventHandler(object sender, getCheckResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCheckResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCheckResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void lljSelfcheckCompletedEventHandler(object sender, lljSelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class lljSelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal lljSelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void sdsqtfxySelfcheckCompletedEventHandler(object sender, sdsqtfxySelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sdsqtfxySelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sdsqtfxySelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void doubleIdleDataCompletedEventHandler(object sender, doubleIdleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doubleIdleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doubleIdleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void loadDownLogCompletedEventHandler(object sender, loadDownLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loadDownLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loadDownLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void ydjSelfcheckCompletedEventHandler(object sender, ydjSelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ydjSelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ydjSelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void cgjSelfcheckCompletedEventHandler(object sender, cgjSelfcheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cgjSelfcheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cgjSelfcheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void loadDownDataCompletedEventHandler(object sender, loadDownDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loadDownDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loadDownDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void argChangCompletedEventHandler(object sender, argChangCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class argChangCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal argChangCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
